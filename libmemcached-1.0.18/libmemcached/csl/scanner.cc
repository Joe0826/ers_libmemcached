#line 2 "libmemcached/csl/scanner.cc"

#include <libmemcached/csl/common.h>
#include <libmemcached/csl/context.h>
#include <libmemcached/csl/parser.h>
#include <libmemcached/csl/symbol.h>

#ifndef __INTEL_COMPILER
#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#pragma GCC diagnostic ignored "-Wunused-result"
#pragma GCC diagnostic ignored "-Wmissing-noreturn"
#endif

#ifdef __clang__
#pragma GCC diagnostic ignored "-Wshorten-64-to-32"
#endif

#ifndef __INTEL_COMPILER
#ifndef __clang__
#pragma GCC diagnostic ignored "-Wlogical-op"
#endif
#endif

#line 28 "libmemcached/csl/scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE config_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via config_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void config_restart (FILE *input_file ,yyscan_t yyscanner );
void config__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE config__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void config__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void config__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void config_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void config_pop_buffer_state (yyscan_t yyscanner );

static void config_ensure_buffer_stack (yyscan_t yyscanner );
static void config__load_buffer_state (yyscan_t yyscanner );
static void config__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER config__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE config__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE config__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE config__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *config_alloc (yy_size_t ,yyscan_t yyscanner );
void *config_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void config_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer config__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        config_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        config_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define config_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 68
#define YY_END_OF_BUFFER 69
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[542] =
    {   0,
        0,    0,   69,   67,    5,    5,    1,   67,   67,   67,
        2,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,    0,   66,    0,   51,
        0,    0,    0,    2,    3,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    6,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,    4,
       65,   65,    2,    3,   65,   56,   65,   65,   47,   65,
       65,   65,   65,   65,   66,    0,   65,   55,   65,   65,
       65,   65,   65,   65,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,    4,    0,   65,    2,    3,
       65,    0,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   49,   51,   51,   51,   51,   51,   51,
        0,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,    4,   65,
       65,    3,   65,   65,   45,   50,   65,    0,   61,   65,
       65,   65,   65,   65,   44,   65,   51,   51,   51,   51,
       51,   51,   51,    0,    0,    0,   51,   51,   51,   51,
       51,   51,    0,   51,   51,   51,    0,   51,   51,   51,

        0,    0,   51,   51,    4,    0,   65,    3,   65,   65,
        0,   65,   65,   65,   65,   53,   62,   54,   65,   51,
       51,   51,   51,   51,   51,    0,   15,    0,    0,    0,
       51,   51,   51,    0,    0,   51,    0,   51,   51,   51,
        0,   51,    0,   51,    0,    0,    0,    0,   51,    4,
       64,   65,   65,   65,   65,   65,   59,   57,   43,   63,
       46,   51,   51,   51,   51,   51,    0,    0,    0,    0,
        0,   51,   51,   51,    0,    0,   51,    0,   51,    0,
       51,    0,   51,    0,   51,    0,    0,    0,    0,   51,
       64,   65,   65,   60,   58,    0,    0,   51,   51,   51,

        0,    0,    0,    0,    0,   51,   19,    0,    0,    0,
        0,   51,    0,    0,    0,    7,    0,    0,    8,    0,
       51,    0,    0,   36,    0,    0,   64,   65,   48,    0,
        0,   51,    0,   51,    0,    0,    0,    0,    0,   51,
        0,    0,    0,    0,   51,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   52,    0,    0,
       51,    0,   51,    0,    0,    0,    0,    0,   51,    0,
        0,   40,   39,   51,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   37,    0,    0,    0,    0,
        0,   51,    0,    0,    0,    0,    0,   41,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   31,    0,    0,
        0,    0,   38,    0,    0,    0,    0,   51,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   32,    0,    0,   35,    0,    0,
        0,    0,   51,    0,    0,    0,    0,    0,   21,   22,
        0,    0,    0,   25,    0,    0,   28,    0,    0,    0,
       34,    0,    0,    0,    0,   13,   42,    0,    0,    0,
        0,    0,   23,    0,    0,    0,    0,    0,   33,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       27,    0,    0,    9,   10,   11,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   12,    0,    0,   17,
        0,    0,    0,    0,    0,    0,    0,    0,   18,    0,
        0,    0,   29,   30,    0,    0,    0,    0,    0,   14,
       16,   20,    0,    0,    0,    0,    0,    0,   24,   26,
        0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   11,   11,   11,   18,    1,    1,
       19,    1,   20,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
        1,   47,    1,    1,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[75] =
    {   0,
        1,    1,    1,    1,    2,    1,    1,    2,    2,    1,
        2,    2,    2,    2,    2,    2,    2,    1,    1,    1,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2
    } ;

static yyconst flex_uint16_t yy_base[547] =
    {   0,
        0,  628,  622, 1765, 1765, 1765, 1765,   70,  613,  595,
       67,   74,    0,   57,   52,   59,   73,   58,   64,   74,
      606,   77,   79,   77,   65,  596,  101, 1765,  587,  138,
      202,  215,  217,  230,  237,  250,  252,  259,  261,  268,
      281,  288,  296,  309,  318,  380,  326,  354,  356,  362,
      364,  400,  406,  581, 1765,  454,  253,   73,   80,   85,
       90,   78,  372,   79,  326,  398,   92,   77,   94,  457,
      411,  520,  533,  486,  504,  437,  546,  548,  553,  558,
      564,  570,  578,  583,  595,  643,    0,  611,  619,  624,
      631,  661,  668,  673,  123,  132,  237,  235,  240,  248,

      574,  295,  302,  315,  402,  363,  359,  423,  392,  412,
      542,  417,  443,  461,  449,  688,  719,  732,  745,  757,
      770,  776,  778,  783,  789,  795,  804,  806,  812,  841,
      848,  850,  856,  703,  468,  544,  551,  534,  584,  581,
      844,  605,  631,  642,  633,  636,  663,  556,  654,  656,
      653,  552,  666,  762,  770,  551,  781,  810,  908,  921,
      879,  928,  907,  942,  944,  949,  951,  956,  958,  963,
      973,  980,  986, 1005, 1011, 1017,  802,  816,  813,  823,
      833,  846,  126,  833,  854,  841,  846,  850,  875,  532,
      531,  913,  935,  935,  939,  977,  969,  992,  522,  983,

     1002,  982,  519, 1006, 1056, 1073, 1086, 1765, 1071, 1099,
     1101, 1115, 1121, 1108, 1133, 1135, 1143, 1145, 1150, 1002,
     1011, 1105, 1122, 1117,  518, 1114, 1765, 1122, 1119, 1139,
     1131, 1136, 1133, 1135, 1143, 1144, 1149, 1154,  511, 1142,
     1153, 1144, 1158, 1149, 1163, 1162, 1177, 1178, 1164, 1765,
     1227, 1213, 1240, 1215, 1246, 1259, 1248, 1261, 1268, 1274,
     1276,  449,  447, 1178, 1194, 1230, 1216, 1242, 1247,  444,
      442, 1266, 1244,  441, 1261, 1274, 1262, 1259,  436, 1257,
      424, 1265,  287, 1266, 1262, 1279, 1281, 1270, 1287,  432,
     1330, 1343, 1345, 1350, 1352, 1276, 1283, 1290,  418, 1296,

     1337, 1324, 1327, 1331, 1325, 1346,    0, 1336, 1340, 1330,
     1341, 1330, 1354, 1354, 1352, 1765, 1357, 1346, 1765, 1347,
      410, 1351, 1363, 1765, 1349, 1375, 1413, 1415, 1420, 1381,
     1401, 1405, 1391, 1392, 1398, 1409,  409, 1400, 1418, 1416,
     1416, 1418,  376,  373, 1419, 1410, 1425, 1415, 1414, 1425,
     1426, 1412, 1430, 1461, 1424, 1436, 1450, 1483, 1451, 1450,
      383, 1460, 1464, 1455,  347, 1452, 1471, 1457,  335,  342,
     1463, 1765, 1765,  338, 1458, 1471, 1476, 1461, 1481, 1471,
     1467, 1486, 1476, 1485, 1490, 1765, 1467, 1473, 1475, 1493,
     1487, 1503, 1513, 1509, 1524, 1520, 1524, 1765, 1519, 1510,

     1515, 1514, 1523, 1521, 1518, 1517, 1536, 1765, 1522, 1533,
     1531, 1519, 1765, 1530, 1542, 1539, 1544, 1538, 1540, 1555,
     1554, 1573, 1561,  326,  324, 1576, 1562, 1580,  320, 1581,
     1566,  319,  329,  325, 1765, 1566, 1584, 1765, 1587, 1572,
     1580, 1578,  305, 1580, 1582, 1591, 1577, 1585, 1765, 1765,
     1583,  302, 1584, 1765, 1597, 1583, 1765, 1585, 1586, 1603,
     1765, 1596, 1592, 1625, 1613, 1765, 1765, 1630, 1619, 1635,
     1640, 1630, 1765, 1631,  280,  266, 1635, 1636, 1765, 1634,
     1628,  262, 1628, 1630, 1637, 1643, 1634, 1644, 1645, 1636,
     1765, 1630, 1631, 1765, 1765, 1765,  260, 1643, 1659,  253,

     1650, 1661, 1664, 1663, 1681, 1685, 1765, 1690, 1675, 1765,
      243, 1693, 1696, 1680,  237,  221, 1696, 1689, 1765, 1682,
      229, 1680, 1765, 1765, 1698,  217,  208, 1686, 1700, 1765,
     1765, 1765, 1701, 1689, 1707, 1690, 1706,  202, 1765, 1765,
     1765, 1758,  154, 1760,  131, 1762
    } ;

static yyconst flex_int16_t yy_def[547] =
    {   0,
      541,    1,  541,  541,  541,  541,  541,  542,  541,  541,
      543,  541,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  544,  542,  541,  542,  541,
      541,  545,  545,  545,  541,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  546,  545,  545,  545,  545,
      545,  545,  545,  544,  541,   30,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,  541,
      545,  545,  545,  541,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  546,   86,  545,  545,  545,
      545,  545,  545,  545,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,  541,  545,  545,  545,  541,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,   56,   56,   56,   56,   56,   56,
      541,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,  541,  545,
      545,  541,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,   56,   56,   56,   56,
       56,   56,   56,  541,  541,  541,   56,   56,   56,   56,
       56,   56,  541,   56,   56,   56,  541,   56,   56,   56,

      541,  541,   56,   56,  541,  545,  545,  541,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,   56,
       56,   56,   56,   56,   56,  541,  541,  541,  541,  541,
       56,   56,   56,  541,  541,   56,  541,   56,   56,   56,
      541,   56,  541,   56,  541,  541,  541,  541,   56,  541,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,   56,   56,   56,   56,   56,  541,  541,  541,  541,
      541,   56,   56,   56,  541,  541,   56,  541,   56,  541,
       56,  541,   56,  541,   56,  541,  541,  541,  541,   56,
      545,  545,  545,  545,  545,  541,  541,   56,   56,   56,

      541,  541,  541,  541,  541,   56,   56,  541,  541,  541,
      541,   56,  541,  541,  541,  541,  541,  541,  541,  541,
       56,  541,  541,  541,  541,  541,  545,  545,  545,  541,
      541,   56,  541,   56,  541,  541,  541,  541,  541,   56,
      541,  541,  541,  541,   56,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  545,  541,  541,
       56,  541,   56,  541,  541,  541,  541,  541,   56,  541,
      541,  541,  541,   56,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,   56,  541,  541,  541,  541,  541,  541,  541,  541,

      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,   56,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,   56,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,

      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
        0,  541,  541,  541,  541,  541
    } ;

static yyconst flex_uint16_t yy_nxt[1840] =
    {   0,
        4,    5,    6,    7,    8,    4,    7,    9,    4,   10,
       11,   11,   11,   11,   11,   11,   11,   12,    7,    4,
       13,   13,   14,   15,   16,   17,   13,   18,   19,   20,
       13,   21,   22,   13,   13,   13,   13,   23,   24,   25,
       13,   13,   13,   13,   13,   13,    4,    4,   13,   13,
       14,   15,   16,   17,   13,   18,   19,   20,   13,   21,
       22,   13,   13,   13,   13,   23,   24,   25,   13,   13,
       13,   13,   13,   13,   28,   33,   39,   34,   34,   34,
       34,   34,   34,   34,   35,   35,   35,   35,   35,   35,
       35,   36,   40,   41,   37,   38,   43,   44,   45,   50,

       47,   52,   53,   51,   39,   28,   42,   97,   98,   99,
      100,   48,  101,  105,  113,  114,   29,   49,  115,   36,
       40,   41,   37,   38,   43,   44,   45,   50,   47,   52,
       53,   51,   71,  226,   42,   97,   98,   99,  100,   48,
      101,  105,  113,  114,  227,   49,  115,   29,   56,   56,
       56,   56,   56,   56,   56,   32,  135,  136,   56,   57,
       58,   59,   56,   60,   56,   61,   62,   56,   56,   56,
       56,   63,   56,   64,   56,   65,   66,   67,   68,   69,
       56,   56,   56,   56,  135,  136,   56,   57,   58,   59,
       56,   60,   56,   61,   62,   56,   56,   56,   56,   63,

       56,   64,   56,   65,   66,   67,   68,   69,   56,   56,
       56,   56,   70,   70,   70,   70,   70,   70,   70,   32,
      540,   32,   32,   32,   32,   32,  532,   72,   72,   72,
       72,   72,   72,   72,   32,  531,  528,   32,   33,  524,
       73,   73,   73,   73,   73,   73,   73,   74,   74,   74,
       74,   74,   74,   74,   32,  523,   32,   32,   32,   32,
       32,  519,   32,   32,   32,   32,   32,   32,   32,   32,
      137,  510,   32,  138,   76,   32,   32,   32,  507,  139,
      496,   95,   78,   75,  491,   32,  140,  490,   32,   32,
       77,   79,   32,   96,  318,   32,   32,   32,  137,   32,

       32,  138,   76,   32,   32,  319,   32,  139,   32,   95,
       78,   75,   80,   32,  140,   32,   32,   32,   77,   79,
      473,   96,   32,  466,   82,   32,   32,  142,   32,   81,
       32,   83,  459,   32,   32,   32,  458,  457,  454,  143,
       80,   88,  450,   32,  449,  401,  106,  144,  107,  399,
      108,   84,   82,  398,  394,  142,   32,   81,   32,   83,
       32,   32,   32,   32,   32,   32,   32,  143,   32,   32,
       32,   32,   32,   32,  106,  144,  107,   89,  108,   84,
       27,   27,   27,   27,   85,   27,   27,   86,   86,   27,
      390,  373,  102,   90,  372,   91,  147,   27,   27,   27,

      148,   32,   92,   32,   32,   89,  103,   32,   32,   32,
       32,   32,  104,   32,   32,   32,  366,  353,   32,   32,
      102,   90,  109,   91,  147,  333,   29,   86,  148,  151,
       92,  110,  111,  145,  103,  152,  146,   93,  112,  326,
      104,   32,  316,  314,   32,   32,   94,   32,  308,  305,
      109,  304,  155,   32,  297,  149,  296,  151,   32,  110,
      111,  145,  150,  152,  146,   93,  112,  116,  116,  116,
      116,  116,  116,  116,   94,   56,   56,   56,  156,   56,
      155,   56,   56,  149,   32,  157,  158,   56,  177,   56,
      150,   56,   56,   56,   56,   56,  120,  120,  120,  120,

      120,  120,  120,   56,   56,   56,  156,   56,   32,   56,
       56,   32,   32,  157,  158,   56,  177,   56,  280,   56,
       56,   56,   56,   56,   32,  267,  248,   32,  117,  243,
      118,  118,  118,  118,  118,  118,  118,   32,  235,  234,
       32,   33,  121,  119,  119,  119,  119,  119,  119,  119,
       32,   32,   32,   32,   32,   32,   32,   32,  201,  197,
       32,   32,   32,  193,  153,   32,   32,   32,   32,  178,
      121,   32,   32,  181,   32,  125,  179,   32,   32,  154,
       32,  141,   32,   55,  180,   32,   32,   32,  123,  541,
       32,   32,  153,  122,  126,   32,  124,  178,   55,   32,

       32,  181,   32,   32,  179,   32,  182,  154,  183,  127,
       46,   32,  180,  128,   31,   32,  123,   32,   32,   32,
       30,  541,  126,   32,  124,   32,   32,   32,   32,  187,
       32,   32,   32,   26,  182,   32,  183,  127,   32,   32,
      541,  128,   32,   27,   27,   27,   27,   85,   27,   27,
       86,   86,   27,  541,  131,  188,  130,  187,   32,  129,
       27,   27,   27,  189,  190,   32,   32,  191,   32,   32,
      541,   32,   32,  541,  541,   32,   32,   32,   32,  541,
       32,   32,  131,  188,  130,  132,  192,  129,  194,   29,
       86,  189,  190,  195,  196,  191,  198,  134,  159,  159,

      159,  159,  159,  159,  159,  541,  541,   32,   32,  133,
       32,   32,  541,  132,  192,   32,  194,  541,  541,  541,
       32,  195,  196,   32,  198,  134,   32,   32,  541,  160,
      160,  160,  160,  160,  160,  160,   32,  133,  541,   32,
      117,  541,  161,  161,  161,  161,  161,  161,  161,   32,
       32,  541,   32,   32,  541,  119,  119,  119,  119,  119,
      119,  119,  541,  541,  541,  541,   32,  162,  162,  162,
      162,  162,  162,  162,   32,  541,  541,   32,   32,   32,
       32,  541,   32,   32,   32,   32,   32,   32,  202,  541,
       32,   32,   32,   32,  541,  541,   32,   32,  163,   32,

      164,  199,   32,   32,  165,  200,  541,  166,   32,  167,
       32,   32,   32,   32,   32,  541,   32,   32,  203,   32,
       32,  541,  169,   32,  541,   32,  163,  541,  164,  199,
       32,  541,  165,  200,  171,  166,  168,  167,  204,  220,
      221,  222,   32,  172,  170,   32,  203,  223,   32,   32,
      169,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,  541,  171,   32,   32,  184,  204,  220,  221,  222,
      224,  172,  170,  225,  185,  223,  186,  228,  229,  230,
      176,  173,  174,   32,  231,  232,   32,  117,   32,  175,
      541,  541,  541,  184,  541,   32,  541,   32,  224,  233,

      541,  225,  185,   32,  186,  228,  229,  230,  176,  173,
      174,   32,  231,  232,   32,   32,  541,  175,  205,  205,
      205,  205,  205,  205,  205,   32,   32,  233,   32,  206,
      541,  207,  207,  207,  207,  207,  207,  207,  208,  208,
      208,  208,  208,  208,  208,  209,   32,  236,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,  541,   32,   32,   32,   32,   32,   32,   32,  212,
       32,   32,  213,  209,  237,  236,  238,   32,  541,  210,
       32,   32,  541,  239,   32,  541,  214,   32,   32,   32,
       32,   32,  541,   32,   32,  541,   32,  541,  211,  541,

      216,  240,  237,   32,  238,   32,  215,  210,  241,   32,
       32,  239,   32,   32,  214,   32,  242,  244,   32,   32,
       32,   32,  247,  217,   32,   32,  541,   32,  216,  240,
      541,  249,  245,   32,  215,  246,  241,  218,  541,  541,
      541,  541,  541,  541,  242,  244,  262,  541,  263,  541,
      247,  217,   32,  541,  219,  541,  541,  541,   32,  249,
      245,  541,  541,  246,   32,  218,  250,  250,  250,  250,
      250,  250,  250,  541,  262,   32,  263,   32,   32,   32,
       32,   32,  219,  251,  251,  251,  251,  251,  251,  251,
       32,  541,  541,   32,  206,  541,  252,  252,  252,  252,

      252,  252,  252,   32,  541,   32,   32,   32,   32,   32,
      253,  541,   32,  541,  255,   32,   32,  256,   32,   32,
       32,  541,   32,   32,  541,   32,  541,  257,   32,   32,
      541,  264,  259,   32,  541,  258,  254,   32,  253,   32,
       32,   32,   32,   32,  265,  266,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,  268,   32,   32,  264,
      259,  269,   32,  270,  254,  271,  272,  273,   32,  541,
      274,  260,  265,  266,  275,  276,  277,  278,  279,  281,
       32,  282,   32,  283,  268,  284,  285,  286,  261,  269,
       32,  270,   32,  271,  272,  273,  287,   32,  274,  260,

      288,  289,  275,  276,  277,  278,  279,  281,  290,  282,
      541,  283,  541,  284,  285,  286,  261,   32,  298,   32,
       32,  206,   32,   32,  287,  541,  541,  541,  288,  289,
      541,   32,  541,  299,   32,   32,  290,  291,  291,  291,
      291,  291,  291,  291,   32,  541,  298,   32,   32,  293,
       32,  300,   32,   32,   32,   32,   32,  301,  294,  541,
       32,  299,   32,   32,  292,   32,   32,   32,   32,   32,
      302,  303,   32,  295,   32,   32,   32,  293,   32,  300,
       32,   32,   32,   32,   32,  301,  306,   32,  307,  309,
      312,  313,  292,   32,  310,   32,  315,  317,  302,  303,

      320,  321,  311,  322,  323,  324,   32,  325,   32,  541,
      541,  330,  541,  541,  306,   32,  307,  309,  312,  313,
      331,   32,  310,   32,  315,  317,  541,  332,  320,  321,
      311,  322,  323,  324,   32,  325,  334,   32,   32,  330,
      327,  327,  327,  327,  327,  327,  327,   32,  331,   32,
       32,   32,   32,   32,   32,  332,   32,   32,   32,   32,
       32,  335,  541,  336,  334,  337,  338,  339,  340,  541,
      341,  541,  342,  343,  344,  345,  328,   32,  346,  347,
      348,  349,  329,  350,  351,  352,  354,  355,  356,  335,
       32,  336,   32,  337,  338,  339,  340,   32,  341,   32,

      342,  343,  344,  345,  328,  357,  346,  347,  348,  349,
      329,  350,  351,  352,  354,  355,  356,   32,  359,   32,
       32,   32,   32,   32,   32,  360,  541,   32,   32,  361,
      362,  363,  541,  357,  541,  364,  365,  367,  368,  541,
      369,  370,  371,  374,  375,  376,  359,  377,  378,  379,
      380,  381,  382,  360,  358,  385,  386,  361,  362,  363,
       32,  541,   32,  364,  365,  367,  368,   32,  369,  370,
      371,  374,  375,  376,  387,  377,  378,  379,  380,  381,
      382,  383,  358,  385,  386,  388,  389,   32,  391,  384,
       32,   32,  392,  393,  395,  396,  397,  400,  402,  403,

      404,  405,  387,  406,  407,  408,  409,  410,  411,  383,
      412,  413,  414,  388,  389,  415,  391,  384,  416,  417,
      392,  393,  395,  396,  397,  400,  402,  403,  404,  405,
       32,  406,  407,  408,  409,  410,  411,  418,  412,  413,
      414,  419,  420,  415,  421,  422,  416,  417,  423,  424,
      427,  425,  428,  429,  430,  431,  426,  432,  433,  434,
      435,  436,  437,  438,  439,  418,  440,  441,  442,  419,
      420,  443,  421,  422,  444,  445,  423,  424,  427,  425,
      428,  429,  430,  431,  426,  432,  433,  434,  435,  436,
      437,  438,  439,  446,  440,  441,  442,  447,  448,  443,

      451,  452,  444,  445,  453,  455,  456,  460,  461,  462,
      463,  464,  465,  467,  468,  469,  470,  471,  472,  474,
      475,  446,  476,  477,  478,  447,  448,  479,  451,  452,
      480,  481,  453,  455,  456,  460,  461,  462,  463,  464,
      465,  467,  468,  469,  470,  471,  472,  474,  475,  482,
      476,  477,  478,  483,  484,  479,  485,  486,  480,  481,
      487,  488,  489,  492,  493,  494,  495,  497,  498,  499,
      500,  501,  502,  503,  504,  505,  506,  482,  508,  509,
      511,  483,  484,  512,  485,  486,  513,  514,  487,  488,
      489,  492,  493,  494,  495,  497,  498,  499,  500,  501,

      502,  503,  504,  505,  506,  515,  508,  509,  511,  516,
      517,  512,  518,  520,  513,  514,  521,  522,  525,  526,
      527,  529,  530,  533,  534,  535,  536,  537,  538,  539,
      541,  541,  541,  515,  541,  541,  541,  516,  517,  541,
      518,  520,  541,  541,  521,  522,  525,  526,  527,  529,
      530,  533,  534,  535,  536,  537,  538,  539,   27,   27,
       54,   54,   87,   87,    3,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,

      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541
    } ;

static yyconst flex_int16_t yy_chk[1840] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    8,   11,   15,   11,   11,   11,
       11,   11,   11,   11,   12,   12,   12,   12,   12,   12,
       12,   14,   16,   17,   14,   14,   18,   19,   20,   23,

       22,   24,   25,   23,   15,   27,   17,   58,   59,   60,
       61,   22,   62,   64,   67,   68,    8,   22,   69,   14,
       16,   17,   14,   14,   18,   19,   20,   23,   22,   24,
       25,   23,  545,  183,   17,   58,   59,   60,   61,   22,
       62,   64,   67,   68,  183,   22,   69,   27,   30,   30,
       30,   30,   30,   30,   30,  543,   95,   96,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   95,   96,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   31,   31,   31,   31,   31,   31,   31,   32,
      538,   33,   32,   32,   33,   33,  527,   33,   33,   33,
       33,   33,   33,   33,   34,  526,  521,   34,   34,  516,
       34,   34,   34,   34,   34,   34,   34,   35,   35,   35,
       35,   35,   35,   35,   36,  515,   37,   36,   36,   37,
       37,  511,   32,   38,   33,   39,   38,   38,   39,   39,
       97,  500,   40,   98,   37,   40,   40,   34,  497,   99,
      482,   57,   39,   36,  476,   41,  100,  475,   41,   41,
       38,   40,   42,   57,  283,   42,   42,   36,   97,   37,

       43,   98,   37,   43,   43,  283,   38,   99,   39,   57,
       39,   36,   41,   44,  100,   40,   44,   44,   38,   40,
      452,   57,   45,  443,   43,   45,   45,  102,   41,   42,
       47,   44,  434,   47,   47,   42,  433,  432,  429,  103,
       41,   47,  425,   43,  424,  374,   65,  104,   65,  370,
       65,   45,   43,  369,  365,  102,   44,   42,   48,   44,
       49,   48,   48,   49,   49,   45,   50,  103,   51,   50,
       50,   51,   51,   47,   65,  104,   65,   48,   65,   45,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
      361,  344,   63,   49,  343,   50,  106,   46,   46,   46,

      107,   48,   51,   49,   52,   48,   63,   52,   52,   50,
       53,   51,   63,   53,   53,   71,  337,  321,   71,   71,
       63,   49,   66,   50,  106,  299,   46,   46,  107,  109,
       51,   66,   66,  105,   63,  110,  105,   52,   66,  290,
       63,   76,  281,  279,   76,   76,   53,   52,  274,  271,
       66,  270,  112,   53,  263,  108,  262,  109,   71,   66,
       66,  105,  108,  110,  105,   52,   66,   70,   70,   70,
       70,   70,   70,   70,   53,   56,   56,   56,  113,   56,
      112,   56,   56,  108,   76,  114,  115,   56,  135,   56,
      108,   56,   56,   56,   56,   56,   74,   74,   74,   74,

       74,   74,   74,   56,   56,   56,  113,   56,   75,   56,
       56,   75,   75,  114,  115,   56,  135,   56,  239,   56,
       56,   56,   56,   56,   72,  225,  203,   72,   72,  199,
       72,   72,   72,   72,   72,   72,   72,   73,  191,  190,
       73,   73,   75,   73,   73,   73,   73,   73,   73,   73,
       77,   75,   78,   77,   77,   78,   78,   79,  156,  152,
       79,   79,   80,  148,  111,   80,   80,   72,   81,  136,
       75,   81,   81,  138,   82,   81,  137,   82,   82,  111,
       73,  101,   83,   54,  137,   83,   83,   84,   78,   29,
       84,   84,  111,   77,   82,   78,   80,  136,   26,   85,

       79,  138,   85,   85,  137,   80,  139,  111,  140,   83,
       21,   81,  137,   84,   10,   88,   78,   82,   88,   88,
        9,    3,   82,   89,   80,   83,   89,   89,   90,  142,
       84,   90,   90,    2,  139,   91,  140,   83,   91,   91,
        0,   84,   85,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,    0,   91,  143,   90,  142,   88,   89,
       86,   86,   86,  144,  145,   92,   89,  146,   92,   92,
        0,   90,   93,    0,    0,   93,   93,   94,   91,    0,
       94,   94,   91,  143,   90,   92,  147,   89,  149,   86,
       86,  144,  145,  150,  151,  146,  153,   94,  116,  116,

      116,  116,  116,  116,  116,    0,    0,  134,   92,   93,
      134,  134,    0,   92,  147,   93,  149,    0,    0,    0,
       94,  150,  151,  117,  153,   94,  117,  117,    0,  117,
      117,  117,  117,  117,  117,  117,  118,   93,    0,  118,
      118,    0,  118,  118,  118,  118,  118,  118,  118,  119,
      134,    0,  119,  119,    0,  119,  119,  119,  119,  119,
      119,  119,    0,    0,    0,    0,  117,  120,  120,  120,
      120,  120,  120,  120,  121,    0,    0,  121,  121,  118,
      122,    0,  123,  122,  122,  123,  123,  124,  157,    0,
      124,  124,  119,  125,    0,    0,  125,  125,  121,  126,

      122,  154,  126,  126,  123,  155,    0,  124,  127,  125,
      128,  127,  127,  128,  128,    0,  129,  121,  157,  129,
      129,    0,  126,  122,    0,  123,  121,    0,  122,  154,
      124,    0,  123,  155,  128,  124,  125,  125,  158,  177,
      178,  179,  126,  129,  127,  130,  157,  180,  130,  130,
      126,  127,  131,  128,  132,  131,  131,  132,  132,  129,
      133,    0,  128,  133,  133,  141,  158,  177,  178,  179,
      181,  129,  127,  182,  141,  180,  141,  184,  185,  186,
      133,  130,  131,  161,  187,  188,  161,  161,  130,  132,
        0,    0,    0,  141,    0,  131,    0,  132,  181,  189,

        0,  182,  141,  133,  141,  184,  185,  186,  133,  130,
      131,  163,  187,  188,  163,  163,    0,  132,  159,  159,
      159,  159,  159,  159,  159,  160,  161,  189,  160,  160,
        0,  160,  160,  160,  160,  160,  160,  160,  162,  162,
      162,  162,  162,  162,  162,  163,  164,  192,  165,  164,
      164,  165,  165,  166,  163,  167,  166,  166,  167,  167,
      168,    0,  169,  168,  168,  169,  169,  170,  160,  168,
      170,  170,  168,  163,  193,  192,  194,  171,    0,  164,
      171,  171,    0,  195,  172,    0,  170,  172,  172,  164,
      173,  165,    0,  173,  173,    0,  166,    0,  167,    0,

      172,  196,  193,  168,  194,  169,  171,  164,  197,  174,
      170,  195,  174,  174,  170,  175,  198,  200,  175,  175,
      171,  176,  202,  173,  176,  176,    0,  172,  172,  196,
        0,  204,  201,  173,  171,  201,  197,  174,    0,    0,
        0,    0,    0,    0,  198,  200,  220,    0,  221,    0,
      202,  173,  174,    0,  176,    0,    0,    0,  175,  204,
      201,    0,    0,  201,  176,  174,  205,  205,  205,  205,
      205,  205,  205,    0,  220,  209,  221,  206,  209,  209,
      206,  206,  176,  206,  206,  206,  206,  206,  206,  206,
      207,    0,    0,  207,  207,    0,  207,  207,  207,  207,

      207,  207,  207,  210,    0,  211,  210,  210,  211,  211,
      209,    0,  214,    0,  211,  214,  214,  211,  209,  212,
      206,    0,  212,  212,    0,  213,    0,  212,  213,  213,
        0,  222,  214,  207,    0,  213,  210,  215,  209,  216,
      215,  215,  216,  216,  223,  224,  210,  217,  211,  218,
      217,  217,  218,  218,  219,  214,  226,  219,  219,  222,
      214,  228,  212,  229,  210,  230,  231,  232,  213,    0,
      233,  215,  223,  224,  234,  235,  236,  237,  238,  240,
      215,  241,  216,  242,  226,  243,  244,  245,  219,  228,
      217,  229,  218,  230,  231,  232,  246,  219,  233,  215,

      247,  248,  234,  235,  236,  237,  238,  240,  249,  241,
        0,  242,    0,  243,  244,  245,  219,  252,  264,  254,
      252,  252,  254,  254,  246,    0,    0,    0,  247,  248,
        0,  251,    0,  265,  251,  251,  249,  251,  251,  251,
      251,  251,  251,  251,  253,    0,  264,  253,  253,  254,
      255,  266,  257,  255,  255,  257,  257,  267,  255,    0,
      252,  265,  254,  256,  253,  258,  256,  256,  258,  258,
      268,  269,  259,  256,  251,  259,  259,  254,  260,  266,
      261,  260,  260,  261,  261,  267,  272,  253,  273,  275,
      277,  278,  253,  255,  276,  257,  280,  282,  268,  269,

      284,  285,  276,  286,  287,  288,  256,  289,  258,    0,
        0,  296,    0,    0,  272,  259,  273,  275,  277,  278,
      297,  260,  276,  261,  280,  282,    0,  298,  284,  285,
      276,  286,  287,  288,  291,  289,  300,  291,  291,  296,
      291,  291,  291,  291,  291,  291,  291,  292,  297,  293,
      292,  292,  293,  293,  294,  298,  295,  294,  294,  295,
      295,  301,    0,  302,  300,  303,  304,  305,  306,    0,
      308,    0,  309,  310,  311,  312,  292,  291,  313,  314,
      315,  317,  293,  318,  318,  320,  322,  323,  325,  301,
      292,  302,  293,  303,  304,  305,  306,  294,  308,  295,

      309,  310,  311,  312,  292,  326,  313,  314,  315,  317,
      293,  318,  318,  320,  322,  323,  325,  327,  330,  328,
      327,  327,  328,  328,  329,  331,    0,  329,  329,  332,
      333,  334,    0,  326,    0,  335,  336,  338,  339,    0,
      340,  341,  342,  345,  346,  347,  330,  348,  349,  350,
      351,  352,  353,  331,  328,  355,  356,  332,  333,  334,
      327,    0,  328,  335,  336,  338,  339,  329,  340,  341,
      342,  345,  346,  347,  357,  348,  349,  350,  351,  352,
      353,  354,  328,  355,  356,  359,  360,  358,  362,  354,
      358,  358,  363,  364,  366,  367,  368,  371,  375,  376,

      377,  378,  357,  379,  380,  381,  382,  383,  384,  354,
      385,  387,  388,  359,  360,  389,  362,  354,  390,  391,
      363,  364,  366,  367,  368,  371,  375,  376,  377,  378,
      358,  379,  380,  381,  382,  383,  384,  392,  385,  387,
      388,  393,  394,  389,  395,  396,  390,  391,  397,  399,
      400,  399,  401,  402,  403,  404,  399,  405,  406,  407,
      409,  410,  411,  412,  414,  392,  415,  416,  417,  393,
      394,  418,  395,  396,  419,  420,  397,  399,  400,  399,
      401,  402,  403,  404,  399,  405,  406,  407,  409,  410,
      411,  412,  414,  421,  415,  416,  417,  422,  423,  418,

      426,  427,  419,  420,  428,  430,  431,  436,  437,  439,
      440,  441,  442,  444,  445,  446,  447,  448,  451,  453,
      455,  421,  456,  458,  459,  422,  423,  460,  426,  427,
      462,  463,  428,  430,  431,  436,  437,  439,  440,  441,
      442,  444,  445,  446,  447,  448,  451,  453,  455,  464,
      456,  458,  459,  465,  468,  460,  469,  470,  462,  463,
      471,  472,  474,  477,  478,  480,  481,  483,  484,  485,
      486,  487,  488,  489,  490,  492,  493,  464,  498,  499,
      501,  465,  468,  502,  469,  470,  503,  504,  471,  472,
      474,  477,  478,  480,  481,  483,  484,  485,  486,  487,

      488,  489,  490,  492,  493,  505,  498,  499,  501,  506,
      508,  502,  509,  512,  503,  504,  513,  514,  517,  518,
      520,  522,  525,  528,  529,  533,  534,  535,  536,  537,
        0,    0,    0,  505,    0,    0,    0,  506,  508,    0,
      509,  512,    0,    0,  513,  514,  517,  518,  520,  522,
      525,  528,  529,  533,  534,  535,  536,  537,  542,  542,
      544,  544,  546,  546,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,

      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "libmemcached/csl/scanner.l"
/*  vim:expandtab:shiftwidth=2:tabstop=2:smarttab:
 *
 *  Libmemcached library
 *
 *  Copyright (C) 2012 Data Differential, http://datadifferential.com/
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are
 *  met:
 *
 *      * Redistributions of source code must retain the above copyright
 *  notice, this list of conditions and the following disclaimer.
 *
 *      * Redistributions in binary form must reproduce the above
 *  copyright notice, this list of conditions and the following disclaimer
 *  in the documentation and/or other materials provided with the
 *  distribution.
 *
 *      * The names of its contributors may not be used to endorse or
 *  promote products derived from this software without specific prior
 *  written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#line 68 "libmemcached/csl/scanner.l"
#define PARAM config_get_extra(yyscanner)

#define get_lex_chars(buffer, result, max_size, context) \
{ \
  if (context->pos >= context->length) \
  { \
    result= YY_NULL; \
  } \
  else \
  { \
    result= (int)(context->length - context->pos); \
    (size_t)result > (size_t)max_size ? result= max_size : 0; \
    memcpy(buffer, context->buf + context->pos, result); \
    context->pos += result; \
  } \
}

#define YY_FATAL_ERROR(msg) \
{ \
}


#define YY_INPUT(buffer, result, max_size) get_lex_chars(buffer, result, max_size, PARAM)

#define YY_NO_INPUT 1
#line 1117 "libmemcached/csl/scanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int config_lex_init (yyscan_t* scanner);

int config_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int config_lex_destroy (yyscan_t yyscanner );

int config_get_debug (yyscan_t yyscanner );

void config_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE config_get_extra (yyscan_t yyscanner );

void config_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *config_get_in (yyscan_t yyscanner );

void config_set_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *config_get_out (yyscan_t yyscanner );

void config_set_out  (FILE * _out_str ,yyscan_t yyscanner );

yy_size_t config_get_leng (yyscan_t yyscanner );

char *config_get_text (yyscan_t yyscanner );

int config_get_lineno (yyscan_t yyscanner );

void config_set_lineno (int _line_number ,yyscan_t yyscanner );

int config_get_column  (yyscan_t yyscanner );

void config_set_column (int _column_no ,yyscan_t yyscanner );

YYSTYPE * config_get_lval (yyscan_t yyscanner );

void config_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int config_wrap (yyscan_t yyscanner );
#else
extern int config_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int config_lex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int config_lex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			config_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		config__load_buffer_state(yyscanner );
		}

	{
#line 109 "libmemcached/csl/scanner.l"



#line 1397 "libmemcached/csl/scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 542 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 541 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 112 "libmemcached/csl/scanner.l"
{ return yytext[0];}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 114 "libmemcached/csl/scanner.l"
{ yylval->number= atoi(yytext); return (NUMBER); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 116 "libmemcached/csl/scanner.l"
{ yylval->number= atoi(yytext +1); return PORT; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 118 "libmemcached/csl/scanner.l"
{ yylval->number= atoi(yytext +2); return WEIGHT_START; }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 120 "libmemcached/csl/scanner.l"
; /* skip whitespace */
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 123 "libmemcached/csl/scanner.l"
{
      return COMMENT;
    }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 127 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; yyextra->set_server(); return yyextra->previous_token= SERVER; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 129 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= CSL_SOCKET; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 131 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= BINARY_PROTOCOL; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 132 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= BUFFER_REQUESTS; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 133 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= CONFIGURE_FILE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 134 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= CONNECT_TIMEOUT; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 135 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= DISTRIBUTION; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 136 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= HASH_WITH_NAMESPACE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 137 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= HASH; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 138 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= IO_BYTES_WATERMARK; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 139 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= IO_KEY_PREFETCH; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 140 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= IO_MSG_WATERMARK; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 141 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= NOREPLY; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 142 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= NUMBER_OF_REPLICAS; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 143 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= NUMBER_OF_K; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 144 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= NUMBER_OF_M; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 145 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= POLL_TIMEOUT; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 146 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= RANDOMIZE_REPLICA_READ; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 147 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= RCV_TIMEOUT; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 148 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= REMOVE_FAILED_SERVERS; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 149 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= RETRY_TIMEOUT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 150 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= SND_TIMEOUT; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 151 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= SOCKET_RECV_SIZE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 152 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= SOCKET_SEND_SIZE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 153 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= SORT_HOSTS; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 154 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= SUPPORT_CAS; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 155 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= _TCP_KEEPALIVE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 156 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= _TCP_KEEPIDLE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 157 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= _TCP_NODELAY; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 158 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= USE_UDP; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 159 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= USER_DATA; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 160 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= VERIFY_KEY; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 162 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= POOL_MIN; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 163 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= POOL_MAX; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 165 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= NAMESPACE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 167 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= FETCH_VERSION; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 169 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= INCLUDE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 170 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= RESET; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 171 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= PARSER_DEBUG; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 172 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= SERVERS; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 173 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= END; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 174 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= CSL_ERROR; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 176 "libmemcached/csl/scanner.l"
{ return yyextra->previous_token= CSL_TRUE; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 177 "libmemcached/csl/scanner.l"
{ return yyextra->previous_token= CSL_FALSE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 180 "libmemcached/csl/scanner.l"
{
      yyextra->begin= yytext;
      return UNKNOWN_OPTION;
    }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 185 "libmemcached/csl/scanner.l"
{ return CONSISTENT; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 186 "libmemcached/csl/scanner.l"
{ return MODULA; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 187 "libmemcached/csl/scanner.l"
{ return RANDOM; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 189 "libmemcached/csl/scanner.l"
{ return MD5; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 190 "libmemcached/csl/scanner.l"
{ return CRC; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 191 "libmemcached/csl/scanner.l"
{ return FNV1_64; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 192 "libmemcached/csl/scanner.l"
{ return FNV1A_64; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 193 "libmemcached/csl/scanner.l"
{ return FNV1_32; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 194 "libmemcached/csl/scanner.l"
{ return FNV1A_32; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 195 "libmemcached/csl/scanner.l"
{ return HSIEH; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 196 "libmemcached/csl/scanner.l"
{ return MURMUR; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 197 "libmemcached/csl/scanner.l"
{ return JENKINS; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 199 "libmemcached/csl/scanner.l"
{
      yyextra->hostname(yytext, yyleng, yylval->server);
      return IPADDRESS;
    }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 204 "libmemcached/csl/scanner.l"
{
      if (yyextra->is_server())
      {
        yyextra->hostname(yytext, yyleng, yylval->server);

        return HOSTNAME;
      }

      yyextra->string_buffer(yytext, yyleng, yylval->string);

      return STRING;
    }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 217 "libmemcached/csl/scanner.l"
{
      config_get_text(yyscanner)[yyleng -1]= 0;
      yyextra->string_buffer(yytext +1, yyleng -2, yylval->string);
      return QUOTED_STRING;
    }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 223 "libmemcached/csl/scanner.l"
{
      yyextra->begin= yytext;
      return UNKNOWN;
    }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 228 "libmemcached/csl/scanner.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1822 "libmemcached/csl/scanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * config_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( config_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of config_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					config_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			config_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) config_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 542 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 542 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 541);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					config_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( config_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void config_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        config_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	config__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	config__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void config__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		config_pop_buffer_state();
	 *		config_push_buffer_state(new_buffer);
     */
	config_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	config__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (config_wrap()) processing, but the only time this flag
	 * is looked at is after config_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void config__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE config__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) config_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in config__create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) config_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in config__create_buffer()" );

	b->yy_is_our_buffer = 1;

	config__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with config__create_buffer()
 * @param yyscanner The scanner object.
 */
    void config__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		config_free((void *) b->yy_ch_buf ,yyscanner );

	config_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a config_restart() or at EOF.
 */
    static void config__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	config__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then config__init_buffer was _probably_
     * called from config_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void config__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		config__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void config_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	config_ensure_buffer_stack(yyscanner);

	/* This block is copied from config__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from config__switch_to_buffer. */
	config__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void config_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	config__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		config__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void config_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)config_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in config_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)config_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in config_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE config__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) config_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in config__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	config__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to config_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       config__scan_bytes() instead.
 */
YY_BUFFER_STATE config__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return config__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to config_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE config__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) config_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in config__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = config__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in config__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE config_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int config_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int config_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *config_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *config_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t config_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *config_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void config_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void config_set_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "config_set_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void config_set_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "config_set_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see config__switch_to_buffer
 */
void config_set_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void config_set_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int config_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void config_set_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * config_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void config_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* config_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int config_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) config_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* config_lex_init_extra has the same functionality as config_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to config_alloc in
 * the yyextra field.
 */

int config_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    config_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) config_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    config_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from config_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * config_lex_init()
     */
    return 0;
}

/* config_lex_destroy is for both reentrant and non-reentrant scanners. */
int config_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		config__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		config_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	config_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        config_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * config_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    config_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *config_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return (void *) malloc( size );
}

void *config_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void config_free (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see config_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 228 "libmemcached/csl/scanner.l"



void Context::init_scanner()
{
  config_lex_init(&scanner);
  config_set_extra(this,scanner);
}

void Context::destroy_scanner()
{
  (void)yy_fatal_error; // Removes warning about unused yy_fatal_error()
  config_lex_destroy(scanner);
}


